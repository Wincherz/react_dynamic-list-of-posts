{"version":3,"sources":["CommentListItem.tsx","CommentList.tsx","PostListItem.tsx","PostList.tsx","api.ts","App.tsx","index.tsx"],"names":["CommentListItem","name","body","email","className","CommentList","comments","map","item","key","id","PostListItem","title","username","address","city","PostList","list","user","URL","getFullList","a","fetch","then","data","json","users","posts","find","person","userId","filter","comment","postId","App","useState","setPosts","filterPage","setFilterPage","loadButton","setLoadButton","isDataLoaded","setDataLoaded","visiblePosts","useMemo","toLowerCase","includes","type","onClick","length","onChange","e","target","value","changedInput","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7b31f51.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  name: string;\n  body: string;\n  email: string;\n};\n\nexport const CommentListItem: React.FC<Props> = ({ name, body, email }) => {\n  return (\n    <li className=\"comment-list__item\">\n      <h3>{name}</h3>\n      <h4>{email}</h4>\n      <p>{body}</p>\n    </li>\n  );\n};\n","import React from 'react';\nimport { CommentListItem } from './CommentListItem';\n\ntype Props = {\n  comments: Comment[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <ul className=\"comment-list\">\n      {(\n        comments.map(item => (\n          <CommentListItem\n            key={item.id}\n            name={item.name}\n            body={item.body}\n            email={item.email}\n          />\n        ))\n      )}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { CommentList } from './CommentList';\n\ntype Props = {\n  comments: Comment[];\n  body: string;\n  title: string;\n  username: string;\n  email: string;\n  address: Address;\n};\n\nexport const PostListItem: React.FC<Props> = (\n  {\n    comments,\n    body,\n    title,\n    username,\n    email,\n    address,\n  },\n) => {\n  return (\n    <>\n      <li className=\"post-list__item\">\n        <h1>{title}</h1>\n        <h2>{username}</h2>\n        <h3>{email}</h3>\n        <h4>{address.city}</h4>\n        <p>{body}</p>\n        <CommentList\n          comments={comments}\n        />\n      </li>\n    </>\n  );\n};\n","import React from 'react';\nimport { PostListItem } from './PostListItem';\n\ntype Props = {\n  list: FullList[];\n};\n\nexport const PostList: React.FC<Props> = ({ list }) => {\n  return (\n    <ul className=\"post-list\">\n      {(\n        list.map((item: FullList) => (\n          <PostListItem\n            key={item.id}\n            comments={item.comments}\n            body={item.body}\n            title={item.title}\n            username={item.user.name}\n            email={item.user.email}\n            address={item.user.address}\n          />\n        )))}\n    </ul>\n  );\n};\n","const URL = 'https://jsonplaceholder.typicode.com';\n\nconst getUsersFromServer = () => {\n  return fetch(`${URL}/users`)\n    .then(data => data.json());\n};\n\nconst getPostsFromServer = () => {\n  return fetch(`${URL}/posts`)\n    .then(data => data.json());\n};\n\nconst getCommentsFromServer = () => {\n  return fetch(`${URL}/comments`)\n    .then(data => data.json());\n};\n\nexport const getFullList = async () => {\n  const users = await getUsersFromServer().then(data => data);\n  const posts = await getPostsFromServer().then(data => data);\n  const comments = await getCommentsFromServer().then(data => data);\n\n  return posts.map((item: Post) => {\n    return {\n      ...item,\n      user: users.find((person: User) => person.id === item.userId),\n      comments: comments.filter((comment: Comment) => comment.postId === item.id),\n    };\n  });\n};\n","import React, { useState, useMemo } from 'react';\nimport { PostList } from './PostList';\n\nimport { getFullList } from './api';\nimport './App.scss';\n\nconst App = () => {\n  const [posts, setPosts] = useState<FullList[]>([]);\n  const [filterPage, setFilterPage] = useState<string>('');\n  const [loadButton, setLoadButton] = useState<boolean>(true);\n  const [isDataLoaded, setDataLoaded] = useState<boolean>(false);\n\n  const getNewPosts = () => {\n    setDataLoaded(true);\n    setLoadButton(!loadButton);\n    getFullList().then(data => {\n      setPosts(data);\n      setDataLoaded(false);\n    });\n  };\n\n  const changedInput = (e: { target: { value: string } }) => {\n    const target = e.target.value;\n\n    setFilterPage(target);\n  };\n\n  const visiblePosts = useMemo(() => {\n    return posts.filter(item => {\n      const str = (item.title + item.body).toLowerCase();\n\n      return (\n        str.includes(filterPage.toLowerCase())\n      );\n    });\n  }, [posts, filterPage]);\n\n  return (\n    <>\n      {\n        isDataLoaded\n        && <h1>Loading...</h1>\n      }\n\n      {\n        loadButton\n        && (\n          <button\n            type=\"button\"\n            onClick={getNewPosts}\n          >\n            Load new posts\n          </button>\n        )\n      }\n\n      {\n        !!visiblePosts.length\n        && (\n          <input\n            type=\"text\"\n            onChange={(e) => changedInput(e)}\n            value={filterPage}\n          />\n        )\n      }\n\n      {\n        !!visiblePosts.length\n        && <PostList list={visiblePosts} />\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}